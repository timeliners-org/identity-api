generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String                   @id @default(uuid())
  email                   String                   @unique
  username                String                   @unique
  passwordHash            String
  isActive                Boolean                  @default(false)
  isVerified              Boolean                  @default(false)
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
  twoFactor               TwoFactorMethod[]
  emailVerificationTokens EmailVerificationToken[]
  RefreshToken            RefreshToken[]
  groups                  UserGroup[]
}

model TwoFactorMethod {
  id       String  @id @default(uuid())
  type     String
  secret   String
  verified Boolean @default(false)
  user     User    @relation(fields: [userId], references: [id])
  userId   String
}

model EmailVerificationToken {
  id        String   @id @default(uuid())
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  used      Boolean  @default(false)
  userId    String?
  user      User?    @relation(fields: [userId], references: [id])

  @@index([token])
  @@index([userId])
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  createdAt DateTime @default(now())
  isRevoked Boolean  @default(false)

  @@index([token])
  @@index([userId])
}

model Group {
  name        String      @id
  description String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  users       UserGroup[]
}

model UserGroup {
  id        String @id @default(uuid())
  userId    String
  groupName String
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  group     Group  @relation(fields: [groupName], references: [name], onDelete: Cascade)

  @@unique([userId, groupName])
}
